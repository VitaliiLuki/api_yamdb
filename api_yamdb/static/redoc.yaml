openapi: 3.0.2
info:
  title: 'YaMDb API'
  version: ''
  description: |
    requests to API start with `/api/v1/`

    # Description
    **YaMDb** project collects user reviews for various works.

    # Algorithm for new users registration.
    1. User send POST-request for adding a new user with following arguments: `email` and `username` to endpoint `/api/v1/auth/signup/`.
    2. **YaMDB** send mail with confirmation code to email adress(this option works with 'django.core.mail.backends.filebased.EmailBackend')
      and send mails to 'sent_mails' directory.
    3. User send POST-request with arguments `username` and `confirmation_code` to endpoint  `/api/v1/auth/token/`, and recieve as a response `token` (JWT-token).
    4. If desired user can send PATCH-request to `/api/v1/users/me/` and fill in all fields in his own profile (fields description - look below).

    # User's roles.
    - **Anonymous** — can overview works description, read reviews and comments.
    - **Authenticated user** (`user`) -  can do the same as anonymous but in addition to can publicate reviews, evaluate works, comment other reviews, edit or delete own reviews/comments. This role is assigned by default.
    - **Moderator** (`moderator`) — has the same rights as user but in addition to has a right to delete any reviews and comments.
    - **Administrator** (`admin`) — has a full rights to rule over all content, can create/delete work titles, genres, categories. Can assign user's roles.
    - **Superuser Django** — has the same rights as administrator.


servers:
  - url: /api/v1/

tags:
  - name: AUTH
    description: User registration and token receiving.
  - name: CATEGORIES
    description: Categories (types) of works.
  - name: GENRES
    description: Genres.
  - name: TITLES
    description: Works to which users write reviews (certain film, book or song).
  - name: REVIEWS
    description: Reviews.
  - name: COMMENTS
    description: Comments to reviews.
  - name: USERS
    description: Users.

paths:
  /auth/signup/:
    post:
      tags:
        - AUTH
      operationId: New user registratuon.
      description: |
        To receive a confirmation code to the given 'email'.

        Access rights: **Available without token.**

        Using 'me' name as `username` is prohibited.

        `email` and `username` fields must be unique.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - username
              properties:
                email:
                  type: string
                username:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                  username:
                    type: string
                required:
                - email
                - username
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'A required field is missing or incorrect'
  /auth/token/:
    post:
      tags:
        - AUTH
      operationId: Receiving JWT-token
      description: |
        To receive JWT-token you need to submit username и confirmation code.

        Access rights: **Available without token.**
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - confirmation_code
              properties:
                username:
                  type: string
                confirmation_code:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: 'Successful execution of the request'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'A required field is missing or incorrect'
        404:
          description: User with email and username wasn't found.

  /categories/:
    get:
      tags:
        - CATEGORIES
      operationId: Receiving categories list.
      description: |
        To receive a list of all categories

        Access rights: **Available without token.**
      parameters:
      - name: search
        in: query
        description: Search by category name
        schema:
          type: string
      responses:
        200:
          description: Successful execution of the request
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
    post:
      tags:
        - CATEGORIES
      operationId: Adding a new category
      description: |
        To create a category.

        Access rights: **Administrator.**

        `slug` field must be unique to each category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /categories/{slug}/:
    delete:
      tags:
        - CATEGORIES
      operationId: Deleting a category
      description: |
        To delete a category.

        Access rights: **Administrator.**
      parameters:
      - name: slug
        in: path
        required: true
        description: Slug of category
        schema:
          type: string
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-токен required
        403:
          description: No rights for access
        404:
          description: The category wasn't found
      security:
      - jwt-token:
        - write:admin

  /genres/:
    get:
      tags:
        - GENRES
      operationId: Receiving a list with all genres
      description: |
        To receive a list with all genres

        Access rights: **Available without token.**
      parameters:
      - name: search
        in: query
        description: Search by genre name
        schema:
          type: string
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Genre'
    post:
      tags:
        - GENRES
      operationId: Adding a genre
      description: |
        To add a genre.

        Access rights: **Administrator**.

        `slug` field for each genre must be uniqie.
      responses:
        201:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin

  /genres/{slug}/:
    delete:
      tags:
        - GENRES
      operationId: Deleting of genre
      description: |
        To delete genre.

        Access rights: **Administrator**.
      parameters:
      - name: slug
        in: path
        required: true
        description: Slug of genre
        schema:
          type: string
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Genre wasn't found
      security:
      - jwt-token:
        - write:admin

  /titles/:
    get:
      tags:
        - TITLES
      operationId: Receiving a list with all work titles
      description: |
        To receive a list with all work titles

        Access rights: **Available without token.**
      parameters:
        - name: category
          in: query
          description: filters by category slug field
          schema:
            type: string
        - name: genre
          in: query
          description: filters by genre slug field
          schema:
            type: string
        - name: name
          in: query
          description: filters by title of work
          schema:
            type: string
        - name: year
          in: query
          description: filters by yearду
          schema:
            type: integer
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Title'
    post:
      tags:
        - TITLES
      operationId: Adding of work title
      description: |
        To add a new work title.

        Access rights: **Administrator**.

        Adding a work titles which haven't released yet is prohibited (Year of release should be less then current).

        When adding a new work title, you must specify an existing category and genre.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        201:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /titles/{titles_id}/:
    parameters:
      - name: titles_id
        in: path
        required: true
        description: Object ID
        schema:
          type: integer
    get:
      tags:
        - TITLES
      operationId: Getting information about a work
      description: |
        Information about a work


        Access rights: **Available without token**
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        404:
          description: Object wasn't found
    patch:
      tags:
        - TITLES
      operationId: Partial information update about a work
      description: |
        To update information about a work


        Access rights: **Administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Object wasn't found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - TITLES
      operationId: Deleating of work title
      description: |
        To delete a work title

        Access rights: **Administrator**
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Work title wasn't found
      security:
      - jwt-token:
        - write:admin

  /titles/{title_id}/reviews/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Work title ID
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Receiving a reviews list
      description: |
        To receive a reviews list.

        Access rights: **Available without token**.
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Review'
        404:
          description: Work title wasn't found
    post:
      tags:
        - REVIEWS
      operationId: Adding a new review
      description: |
        To add a new review. User can write just one review.

        Access rights: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        404:
          description: Work title wasn't found
      security:
      - jwt-token:
        - write:user,moderator,admin
  /titles/{title_id}/reviews/{review_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Work title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Getting review by id
      description: |
        To get a review by id for certaing work title.

        Access rights: **Avalilable without token.**
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        404:
          description: Work title or review wasn't found.
    patch:
      tags:
        - REVIEWS
      operationId: Partial review update by id
      description: |
        Partially update review by id.

        Access rights: **Author of review, moderator or administrator.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Work title wasn't found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - REVIEWS
      operationId: Deleting a review by id
      description: |
        To delete review by id

        Access rights: **Author of review, moderator or administrator.**
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Work title or review weren't found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Work title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Getting a commentary list to the certain review.
      description: |
        To get a commentary list to the certain review by id.

        Access rights: **Available without token.**
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
        404:
          description: Work title or review weren't found
    post:
      tags:
        - COMMENTS
      operationId: Adding a comment to certain review
      description: |
        To add a new comment to certain review

        Access rights: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        404:
          description: Work title or review weren't found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Work title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Getting a comment to certain review
      description: |
        To get a comment to certain review

        Access rights: **Avalilable without token.**
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        404:
          description: Work title, review or comment wasn't found
    patch:
      tags:
        - COMMENTS
      operationId: Partially comment update to certain review
      description: |
        Partially update a comment to the certain review by id.

        Access rights: **Author of comment, moderator or administrator**.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Work title, review or comment wasn't found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - COMMENTS
      operationId: Deleting a comment to the certain review
      description: |
        TO delete a comment to the certain review by id.

        Access rights: **Author of comment, moderator or administrator**.
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Work title, review or comment wasn't found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /users/:
    get:
      tags:
        - USERS
      operationId: Getting a list of all users
      description: |
        To get a list of all users.

        Access rights: **Administrator**.
      parameters:
      - name: search
        in: query
        description: Search by username
        schema:
          type: string
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
        401:
          description: JWT-token required
      security:
      - jwt-token:
        - read:admin
    post:
      tags:
        - USERS
      operationId: Adding a new user
      description: |
        To add a new user.

        Access rights: **Administrator**.

        `email` and `username` fields must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /users/{username}/:
    parameters:
      - name: username
        in: path
        required: true
        description: Username
        schema:
          type: string
    get:
      tags:
        - USERS
      operationId: Getting a user by username
      description: |
        To get a user by username

        Access rights: **Administrator**.
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User wasn't found
      security:
      - jwt-token:
        - read:admin
    patch:
      tags:
        - USERS
      operationId: Changing user data by username
      description: |
        To change user data by username

        Access rights: **Administrator**.

        `email` и `username` fields must be unique
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'Successful execution of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User wasn't found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - USERS
      operationId: Deleting a user by username
      description: |
        TO delete a user by username

        Access rights: **Administrator**.
      responses:
        204:
          description: 'Successful execution of the request'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User wasn't found
      security:
      - jwt-token:
        - write:admin

  /users/me/:
    get:
      tags:
        - USERS
      operationId: Getting your account information
      description: |
        TO get your account information

        Access rights: **Authenticated user**
      responses:
        200:
          description: Successful execution of the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - jwt-token:
        - read:admin,moderator,user
    patch:
      tags:
        - USERS
      operationId: Changing own account information
      description: |
        To change own account information

        Access rights: **Authenticated user**

        `email` and `username` must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Me'
      responses:
        200:
          description: Successful execution of the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'The required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
      - jwt-token:
        - write:admin,moderator,user

components:
  schemas:

    User:
      title: User
      type: object
      description: Detail information about user
      required:
          - username
          - email
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
        role:
          type: string
          description: Administrator, moderator or user. By default `user`.
          enum:
            - user
            - moderator
            - admin

    Title:
      title: Object
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          title: Work title ID
          readOnly: true
        name:
          type: string
          title: name
        year:
          type: integer
          title: Year of release
        rating:
          type: integer
          readOnly: True
          title: Rating based on reviews if there are no reviews - set 'None'
        description:
          type: string
          title: description
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        category:
          $ref: '#/components/schemas/Category'

    TitleCreate:
      title: Object to change
      type: object
      required:
        - name
        - year
        - genre
        - category
      properties:
        name:
          type: string
          title: name
        year:
          type: integer
          title: Year of release
        description:
          type: string
          title: description
        genre:
          type: array
          items:
            type: string
            title: Slug of genre
        category:
          type: string
          title: Slug of category

    Genre:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

    Review:
      title: Review
      type: object
      description: Detail information about a review
      required:
          - text
          - score
      properties:
        id:
          type: integer
          title: Review ID
          readOnly: true
        text:
          type: string
          title: Text of review
        author:
          type: string
          title: User's username
          readOnly: true
        score:
          type: integer
          title: Grade
          minimum: 1
          maximum: 10
        pub_date:
          type: string
          format: date-time
          title: Pablication date of a review
          readOnly: true

    ValidationError:
      title: Validation error
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string

    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
          title: access roken

    Comment:
      title: Comment
      type: object
      description: Comment's detail information
      required:
        - text
      properties:
        id:
          type: integer
          title: Comment ID
          readOnly: true
        text:
          type: string
          title: Text of comment
        author:
          type: string
          title: author's username of comment
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Date the comment was posted
          readOnly: true

    Me:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        role:
          enum:
          - admin
          - moderator
          - user
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
      required:
      - username
      - email

    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

  securitySchemes:
    jwt-token:
      type: apiKey
      description: Authentication using JWT tokens
      name: Bearer
      in: header
